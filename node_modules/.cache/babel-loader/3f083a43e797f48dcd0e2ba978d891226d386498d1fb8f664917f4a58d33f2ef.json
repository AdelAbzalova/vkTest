{"ast":null,"code":"import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n// import groupsData from './groups.json'\n// interface GetGroupsResponse {\n//     result: 1 | 0,\n//     data?: Group[]\n//   }\n\n//   interface Group {\n//     \"id\": number,\n//     \"name\": string,\n//     \"closed\": boolean,\n//     \"avatar_color\"?: string,\n//     \"members_count\": number,\n//     \"friends\"?: User[]\n//   }\n\n//   interface User {\n//     \"first_name\": string,\n//     \"last_name\": string\n//   }\n\n//   interface GroupsState{\n//     groups:Group[],\n//     status:string, \n//     error:string\n\n//   }\n\n//   const initialState:GroupsState={\n//     groups:[],\n//     status:'', \n//     error:'',\n//   }\nconst initialState = {\n  groups: [],\n  status: '',\n  error: ''\n};\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async () => {\n  const response = (await new Promise()) < GetGroupsResponse > (resolve => {\n    setTimeout(() => {\n      resolve({\n        result: 1,\n        data: require('./groups.json')\n      });\n    }, 100);\n  });\n  if (response.result) {\n    console.log('data', response.data);\n    return response.data;\n  } else {\n    throw new Error('Failed to fetch groups');\n  }\n});\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  //  {\n  //   groups: [],\n  //   status: '',\n  // //   error: null,\n  // error:''\n  // },\n  reducers: {},\n  extraReducers: {\n    [fetchGroups.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchGroups.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.groups = action.payload || [];\n    },\n    [fetchGroups.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\n\n// action:PayloadAction<тип передаваемых данных>\n//PayloadAction<Group[]>\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n\n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n\n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n// list: [],\n// platform:null, \n// sort:null,\n// genre:null, \n// loading:false , \n// error:null,\n// gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n// changeLoading(state, action){\n//     state.loading=action.payload;\n// }, \n// changeGenre(state, action){\n//     state.genre=action.payload\n// }, \n// changeSort(state, action){\n//     state.sort=action.payload\n// },\n// changePlatform(state, action){\n//     state.platform=action.payload\n// }, \n// clearFilters(state){\n//     state.platform=null;\n//     state.genre=null;\n//     state.sort=null;\n// },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\n// export const {\n// // changePlatform, \n// // changeGenre, \n// // changeSort, \n// // changeLoading, \n// // clearFilters, \n// } = groupSlice.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","PayloadAction","initialState","groups","status","error","fetchGroups","response","Promise","GetGroupsResponse","resolve","setTimeout","result","data","require","console","log","Error","groupsSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/adel/Desktop/work/react/vk/vk_test2/src/store/groupSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n// import groupsData from './groups.json'\n// interface GetGroupsResponse {\n//     result: 1 | 0,\n//     data?: Group[]\n//   }\n  \n//   interface Group {\n//     \"id\": number,\n//     \"name\": string,\n//     \"closed\": boolean,\n//     \"avatar_color\"?: string,\n//     \"members_count\": number,\n//     \"friends\"?: User[]\n//   }\n  \n//   interface User {\n//     \"first_name\": string,\n//     \"last_name\": string\n//   }\n\n//   interface GroupsState{\n//     groups:Group[],\n//     status:string, \n//     error:string\n   \n//   }\n\n//   const initialState:GroupsState={\n//     groups:[],\n//     status:'', \n//     error:'',\n//   }\n  const initialState={\n    groups:[],\n    status:'', \n    error:'',\n  }\n\n\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async () => {\n    const response = await new Promise<GetGroupsResponse>(resolve => {\n      setTimeout(() => {\n        resolve({ result: 1, data: require('./groups.json') });\n      }, 100);\n    });\n  \n    if (response.result) {\n        console.log('data',response.data);\n      return response.data;\n    } else {\n      throw new Error('Failed to fetch groups');\n\n    }\n  });\n  const groupsSlice = createSlice({\n    name: 'groups',\n    initialState,\n    //  {\n    //   groups: [],\n    //   status: '',\n    // //   error: null,\n    // error:''\n    // },\n    reducers: {},\n    extraReducers: {\n      [fetchGroups.pending]: (state) => {\n        state.status = 'loading';\n      },\n      [fetchGroups.fulfilled]: (state, action) => {\n        state.status = 'succeeded';\n        state.groups = action.payload || [];\n      },\n      [fetchGroups.rejected]: (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      },\n    },\n\n  });\n\n  // action:PayloadAction<тип передаваемых данных>\n  //PayloadAction<Group[]>\n  \n\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n  \n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n  \n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n  \n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n    // list: [],\n    // platform:null, \n    // sort:null,\n    // genre:null, \n    // loading:false , \n    // error:null,\n    // gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n    // changeLoading(state, action){\n    //     state.loading=action.payload;\n    // }, \n    // changeGenre(state, action){\n    //     state.genre=action.payload\n    // }, \n    // changeSort(state, action){\n    //     state.sort=action.payload\n    // },\n    // changePlatform(state, action){\n    //     state.platform=action.payload\n    // }, \n    // clearFilters(state){\n    //     state.platform=null;\n    //     state.genre=null;\n    //     state.sort=null;\n    // },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\n// export const {\n// // changePlatform, \n// // changeGenre, \n// // changeSort, \n// // changeLoading, \n// // clearFilters, \n// } = groupSlice.actions;\n\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,kBAAkB;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACE,MAAMC,YAAY,GAAC;EACjBC,MAAM,EAAC,EAAE;EACTC,MAAM,EAAC,EAAE;EACTC,KAAK,EAAC;AACR,CAAC;AAGH,OAAO,MAAMC,WAAW,GAAGN,gBAAgB,CAAC,oBAAoB,EAAE,YAAY;EAC1E,MAAMO,QAAQ,GAAG,OAAM,IAAIC,OAAO,CAAD,CAAC,IAACC,iBAAiB,IAAEC,OAAO,IAAI;IAC/DC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QAAEE,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAEC,OAAO,CAAC,eAAe;MAAE,CAAC,CAAC;IACxD,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;EAEF,IAAIP,QAAQ,CAACK,MAAM,EAAE;IACjBG,OAAO,CAACC,GAAG,CAAC,MAAM,EAACT,QAAQ,CAACM,IAAI,CAAC;IACnC,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,MAAM;IACL,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;EAE3C;AACF,CAAC,CAAC;AACF,MAAMC,WAAW,GAAGnB,WAAW,CAAC;EAC9BoB,IAAI,EAAE,QAAQ;EACdjB,YAAY;EACZ;EACA;EACA;EACA;EACA;EACA;EACAkB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAE;IACb,CAACf,WAAW,CAACgB,OAAO,GAAIC,KAAK,IAAK;MAChCA,KAAK,CAACnB,MAAM,GAAG,SAAS;IAC1B,CAAC;IACD,CAACE,WAAW,CAACkB,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAACnB,MAAM,GAAG,WAAW;MAC1BmB,KAAK,CAACpB,MAAM,GAAGsB,MAAM,CAACC,OAAO,IAAI,EAAE;IACrC,CAAC;IACD,CAACpB,WAAW,CAACqB,QAAQ,GAAG,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACzCF,KAAK,CAACnB,MAAM,GAAG,QAAQ;MACvBmB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAACuB,OAAO;IACpC;EACF;AAEF,CAAC,CAAC;;AAEF;AACA;;AAIF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAeV,WAAW,CAACW,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}