{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  groups: [],\n  status: '',\n  // error:'',\n  privacyFilter: null,\n  avatarFilter: null,\n  friendsFilter: null\n};\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async (_, {\n  rejectWithValue\n}) => {\n  // const response = await new Promise<GetGroupsResponse>(resolve => {\n  const response = await new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        result: 1,\n        data: require('./groups.json')\n      });\n    }, 1000);\n  });\n  if (response.result && response.data) {\n    return response.data;\n  } else {\n    return rejectWithValue('server error');\n    // throw new Error('Failed to fetch groups');\n  }\n});\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    changePrivacyFilter(state, action) {\n      state.privacyFilter = action.payload;\n    },\n    changeAvatarFilter(state, action) {\n      state.avatarFilter = action.payload;\n    },\n    changeFriendsFilter(state, action) {\n      state.friendsFilter = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchGroups.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchGroups.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.groups = action.payload || [];\n    }).addCase(fetchGroups.rejected, state => {\n      state.status = 'failed';\n      // state.error = action.error.message;\n    });\n  }\n});\n\n// action:PayloadAction<тип передаваемых данных>\n//PayloadAction<Group[]>\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n\n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n\n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n// list: [],\n// platform:null, \n// sort:null,\n// genre:null, \n// loading:false , \n// error:null,\n// gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n// changeLoading(state, action){\n//     state.loading=action.payload;\n// }, \n// changeGenre(state, action){\n//     state.genre=action.payload\n// }, \n// changeSort(state, action){\n//     state.sort=action.payload\n// },\n// changePlatform(state, action){\n//     state.platform=action.payload\n// }, \n// clearFilters(state){\n//     state.platform=null;\n//     state.genre=null;\n//     state.sort=null;\n// },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\nexport const {\n  changePrivacyFilter,\n  changeAvatarFilter,\n  changeFriendsFilter\n  // changePlatform, \n  // changeGenre, \n  // changeSort, \n  // changeLoading, \n  // clearFilters, \n} = groupsSlice.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","groups","status","privacyFilter","avatarFilter","friendsFilter","fetchGroups","_","rejectWithValue","response","Promise","resolve","setTimeout","result","data","require","groupsSlice","name","reducers","changePrivacyFilter","state","action","payload","changeAvatarFilter","changeFriendsFilter","extraReducers","builder","addCase","pending","fulfilled","rejected","reducer","actions"],"sources":["/Users/adel/Desktop/work/react/vk/vk_test2/src/store/groupSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Group } from \"../models/models\";\ninterface GetGroupsResponse {\n    result: 1 | 0,\n    data?: Group[]\n  }\n  \n  interface GroupsState{\n    groups:Group[],\n    status:string, \n    // error:string, \n    privacyFilter:boolean|null, \n    avatarFilter:string|null,\n    friendsFilter:boolean|null\n  }\n\n  const initialState:GroupsState={\n    groups:[],\n    status:'', \n    // error:'',\n    privacyFilter:null,\n    avatarFilter:null,\n    friendsFilter:null\n  }\n\n\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async (_, {rejectWithValue}) => {\n    // const response = await new Promise<GetGroupsResponse>(resolve => {\n      const response = await new Promise<GetGroupsResponse>(resolve => {\n      setTimeout(() => {\n        resolve({ result: 1, data: require('./groups.json') });\n      }, 1000);\n    });\n    if (response.result && response.data) {\n\n      return response.data;\n    } else {\n        return rejectWithValue('server error')\n      // throw new Error('Failed to fetch groups');\n\n    }\n  });\n  const groupsSlice = createSlice({\n    name: 'groups',\n    initialState,\n    reducers: {\n      changePrivacyFilter(state, action:PayloadAction<boolean|null>){\n        state.privacyFilter=action.payload\n      }, \n      changeAvatarFilter(state, action:PayloadAction<string|null>){\n        state.avatarFilter=action.payload\n      }, \n      changeFriendsFilter(state, action:PayloadAction<boolean|null>){\n        state.friendsFilter=action.payload\n      }\n    },\n    extraReducers:(builder)=> {\n      builder\n      .addCase(fetchGroups.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchGroups.fulfilled, (state, action:PayloadAction<Group[]>) => {\n        state.status = 'succeeded';\n        state.groups = action.payload || [];\n      })\n      .addCase(fetchGroups.rejected, (state) => {\n        state.status = 'failed';\n        // state.error = action.error.message;\n      });\n\n\n\n    },\n\n  });\n\n\n  // action:PayloadAction<тип передаваемых данных>\n  //PayloadAction<Group[]>\n  \n\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n  \n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n  \n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n  \n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n    // list: [],\n    // platform:null, \n    // sort:null,\n    // genre:null, \n    // loading:false , \n    // error:null,\n    // gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n    // changeLoading(state, action){\n    //     state.loading=action.payload;\n    // }, \n    // changeGenre(state, action){\n    //     state.genre=action.payload\n    // }, \n    // changeSort(state, action){\n    //     state.sort=action.payload\n    // },\n    // changePlatform(state, action){\n    //     state.platform=action.payload\n    // }, \n    // clearFilters(state){\n    //     state.platform=null;\n    //     state.genre=null;\n    //     state.sort=null;\n    // },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\nexport const {\n  changePrivacyFilter, \n  changeAvatarFilter, \n  changeFriendsFilter\n// changePlatform, \n// changeGenre, \n// changeSort, \n// changeLoading, \n// clearFilters, \n} = groupsSlice.actions;\n\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAgB7E,MAAMC,YAAwB,GAAC;EAC7BC,MAAM,EAAC,EAAE;EACTC,MAAM,EAAC,EAAE;EACT;EACAC,aAAa,EAAC,IAAI;EAClBC,YAAY,EAAC,IAAI;EACjBC,aAAa,EAAC;AAChB,CAAC;AAGH,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CAAC,oBAAoB,EAAE,OAAOQ,CAAC,EAAE;EAACC;AAAe,CAAC,KAAK;EAC9F;EACE,MAAMC,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAoBC,OAAO,IAAI;IACjEC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QAAEE,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAEC,OAAO,CAAC,eAAe;MAAE,CAAC,CAAC;IACxD,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;EACF,IAAIN,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,IAAI,EAAE;IAEpC,OAAOL,QAAQ,CAACK,IAAI;EACtB,CAAC,MAAM;IACH,OAAON,eAAe,CAAC,cAAc,CAAC;IACxC;EAEF;AACF,CAAC,CAAC;AACF,MAAMQ,WAAW,GAAGlB,WAAW,CAAC;EAC9BmB,IAAI,EAAE,QAAQ;EACdjB,YAAY;EACZkB,QAAQ,EAAE;IACRC,mBAAmBA,CAACC,KAAK,EAAEC,MAAkC,EAAC;MAC5DD,KAAK,CAACjB,aAAa,GAACkB,MAAM,CAACC,OAAO;IACpC,CAAC;IACDC,kBAAkBA,CAACH,KAAK,EAAEC,MAAiC,EAAC;MAC1DD,KAAK,CAAChB,YAAY,GAACiB,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,mBAAmBA,CAACJ,KAAK,EAAEC,MAAkC,EAAC;MAC5DD,KAAK,CAACf,aAAa,GAACgB,MAAM,CAACC,OAAO;IACpC;EACF,CAAC;EACDG,aAAa,EAAEC,OAAO,IAAI;IACxBA,OAAO,CACNC,OAAO,CAACrB,WAAW,CAACsB,OAAO,EAAGR,KAAK,IAAK;MACvCA,KAAK,CAAClB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDyB,OAAO,CAACrB,WAAW,CAACuB,SAAS,EAAE,CAACT,KAAK,EAAEC,MAA6B,KAAK;MACxED,KAAK,CAAClB,MAAM,GAAG,WAAW;MAC1BkB,KAAK,CAACnB,MAAM,GAAGoB,MAAM,CAACC,OAAO,IAAI,EAAE;IACrC,CAAC,CAAC,CACDK,OAAO,CAACrB,WAAW,CAACwB,QAAQ,EAAGV,KAAK,IAAK;MACxCA,KAAK,CAAClB,MAAM,GAAG,QAAQ;MACvB;IACF,CAAC,CAAC;EAIJ;AAEF,CAAC,CAAC;;AAGF;AACA;;AAIF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAec,WAAW,CAACe,OAAO;AAClC,OAAO,MAAM;EACXZ,mBAAmB;EACnBI,kBAAkB;EAClBC;EACF;EACA;EACA;EACA;EACA;AACA,CAAC,GAAGR,WAAW,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}