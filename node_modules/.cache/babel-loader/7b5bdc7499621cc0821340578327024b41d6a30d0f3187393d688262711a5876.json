{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import groupsData from './groups.json'\n\nconst initialState = {\n  groups: []\n  // status:'', \n  // error:'',\n};\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async () => {\n  const response = await new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        result: 1,\n        data: require('./groups.json')\n      });\n    }, 100);\n  });\n  if (response.result) {\n    console.log('data', response.data);\n    return response.data;\n  } else {\n    throw new Error('Failed to fetch groups');\n  }\n});\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  //  {\n  //   groups: [],\n  //   status: '',\n  // //   error: null,\n  // error:''\n  // },\n  reducers: {}\n  // extraReducers: {\n  //   [fetchGroups.pending]: (state) => {\n  //     state.status = 'loading';\n  //   },\n  //   [fetchGroups.fulfilled]: (state, action:PayloadAction<Group[]>) => {\n  //     state.status = 'succeeded';\n  //     state.groups = action.payload || [];\n  //   },\n  //   [fetchGroups.rejected]: (state, action) => {\n  //     state.status = 'failed';\n  //     state.error = action.error.message;\n  //   },\n  // },\n});\n\n// action:PayloadAction<тип передаваемых данных>\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n\n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n\n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n// list: [],\n// platform:null, \n// sort:null,\n// genre:null, \n// loading:false , \n// error:null,\n// gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n// changeLoading(state, action){\n//     state.loading=action.payload;\n// }, \n// changeGenre(state, action){\n//     state.genre=action.payload\n// }, \n// changeSort(state, action){\n//     state.sort=action.payload\n// },\n// changePlatform(state, action){\n//     state.platform=action.payload\n// }, \n// clearFilters(state){\n//     state.platform=null;\n//     state.genre=null;\n//     state.sort=null;\n// },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\n// export const {\n// // changePlatform, \n// // changeGenre, \n// // changeSort, \n// // changeLoading, \n// // clearFilters, \n// } = groupSlice.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","groups","fetchGroups","response","Promise","resolve","setTimeout","result","data","require","console","log","Error","groupsSlice","name","reducers","reducer"],"sources":["/Users/adel/Desktop/work/react/vk/vk_test2/src/store/groupSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n// import groupsData from './groups.json'\ninterface GetGroupsResponse {\n    result: 1 | 0,\n    data?: Group[]\n  }\n  \n  interface Group {\n    \"id\": number,\n    \"name\": string,\n    \"closed\": boolean,\n    \"avatar_color\"?: string,\n    \"members_count\": number,\n    \"friends\"?: User[]\n  }\n  \n  interface User {\n    \"first_name\": string,\n    \"last_name\": string\n  }\n\n  interface GroupsState{\n    groups:Group[],\n    // status:string, \n    // error:string,\n  }\n\n  const initialState:GroupsState={\n    groups:[],\n    // status:'', \n    // error:'',\n  }\n\n\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async () => {\n    const response = await new Promise<GetGroupsResponse>(resolve => {\n      setTimeout(() => {\n        resolve({ result: 1, data: require('./groups.json') });\n      }, 100);\n    });\n  \n    if (response.result) {\n        console.log('data',response.data);\n      return response.data;\n    } else {\n      throw new Error('Failed to fetch groups');\n\n    }\n  });\n  const groupsSlice = createSlice({\n    name: 'groups',\n    initialState,\n    //  {\n    //   groups: [],\n    //   status: '',\n    // //   error: null,\n    // error:''\n    // },\n    reducers: {},\n    // extraReducers: {\n    //   [fetchGroups.pending]: (state) => {\n    //     state.status = 'loading';\n    //   },\n    //   [fetchGroups.fulfilled]: (state, action:PayloadAction<Group[]>) => {\n    //     state.status = 'succeeded';\n    //     state.groups = action.payload || [];\n    //   },\n    //   [fetchGroups.rejected]: (state, action) => {\n    //     state.status = 'failed';\n    //     state.error = action.error.message;\n    //   },\n    // },\n  });\n\n  // action:PayloadAction<тип передаваемых данных>\n  \n\n\n// export const fetchGroups = createAsyncThunk(\n//     'groups/fetchGroups', \n//     async function(_, {rejectWithValue, getState}){\n//         // const games=getState().games;\n\n//         // const isCategory =games.genre ? `&category=${games.genre}` : \"\";\n//         // const isPlatform = games.platform ? `${games.platform}` : \"all\";\n//         // const isSort = games.sort ? `&sort-by=${games.sort}` : \"\";\n\n  \n//             const response = await fetch('groups.json');\n//             // console.log('response', response.json())\n\n//             // const response= await fetch(`https://dummyjson.com/users/search?q`);\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             // const data= await response.json();\n//             const data= await response.json()\n//             const data2=groupsData;\n//             console.log('data', data);\n//             return data2;\n  \n//     }\n//   )\n\n// export const fetchGame = createAsyncThunk(\n//     'game/fetchGame', \n//     async function(id, {rejectWithValue}){\n//             const response= await fetch(`https://free-to-play-games-database.p.rapidapi.com/api/game?id=${id}`, {\n//                     // method: \"GET\",\n//                     // headers: {\n\n//                     //     \"X-RapidAPI-Key\": \"2db4ae875cmshc804e07e556fbf9p1241acjsn750ba9cc2e97\",\n//                     //     \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\",\n//                     // },\n//             });\n\n//             if(!response.ok){\n//                return rejectWithValue('server error')\n//             }\n//             const data= await response.json();\n//             return data;\n  \n//     }\n//   )\n\n// const groupSlice = createSlice({\n//   name: \"groups\",\n//   initialState: {\n    // list: [],\n    // platform:null, \n    // sort:null,\n    // genre:null, \n    // loading:false , \n    // error:null,\n    // gameInfo:{},\n//     groups:{},\n//   },\n//   reducers: {\n    // changeLoading(state, action){\n    //     state.loading=action.payload;\n    // }, \n    // changeGenre(state, action){\n    //     state.genre=action.payload\n    // }, \n    // changeSort(state, action){\n    //     state.sort=action.payload\n    // },\n    // changePlatform(state, action){\n    //     state.platform=action.payload\n    // }, \n    // clearFilters(state){\n    //     state.platform=null;\n    //     state.genre=null;\n    //     state.sort=null;\n    // },\n\n//   },\n//   extraReducers:{\n//     [ fetchTodos.pending]:(state )=>{\n//         // state.status='loading';\n//         // state.error=null;\n//     },\n//     [ fetchTodos.fulfilled]:(state, action)=>{\n//         // state.status='resolved';\n//         // state.todos=action.payload; \n//     },\n//     [ fetchTodos.rejected]:setError,\n//     [deleteTodo.rejected]: setError, \n//     [toggleStatus.rejected]:setError, \n//         },\n//   extraReducers:(builder)=>{\n//     builder \n//             .addCase(fetchGroups.pending, (state)=>{\n//               state.loading=true;\n//               state.error=null;\n//             })\n//             .addCase(fetchGroups.fulfilled, (state, action)=>{\n//               state.list=action.payload;\n//               state.loading=false;\n//             })\n//             .addCase(fetchGroups.pending, (state)=>{\n//                 state.loading=true;\n//                 state.error=null;\n//               })\n//               .addCase(fetchGroups.fulfilled, (state, action)=>{\n//                 state.gameInfo=action.payload;\n//                 state.loading=false;\n//               })\n//               .addMatcher(isError, (state )=>{\n//                 state.error=true;\n//                 state.loading= false;\n//               })\n//   }\n// });\n// function isError(action){\n\n//     return action.type.endsWith('rejected')\n//   }\n\nexport default groupsSlice.reducer;\n// export const {\n// // changePlatform, \n// // changeGenre, \n// // changeSort, \n// // changeLoading, \n// // clearFilters, \n// } = groupSlice.actions;\n\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E;;AA0BE,MAAMC,YAAwB,GAAC;EAC7BC,MAAM,EAAC;EACP;EACA;AACF,CAAC;AAGH,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CAAC,oBAAoB,EAAE,YAAY;EAC1E,MAAMI,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAoBC,OAAO,IAAI;IAC/DC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QAAEE,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAEC,OAAO,CAAC,eAAe;MAAE,CAAC,CAAC;IACxD,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;EAEF,IAAIN,QAAQ,CAACI,MAAM,EAAE;IACjBG,OAAO,CAACC,GAAG,CAAC,MAAM,EAACR,QAAQ,CAACK,IAAI,CAAC;IACnC,OAAOL,QAAQ,CAACK,IAAI;EACtB,CAAC,MAAM;IACL,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;EAE3C;AACF,CAAC,CAAC;AACF,MAAMC,WAAW,GAAGf,WAAW,CAAC;EAC9BgB,IAAI,EAAE,QAAQ;EACdd,YAAY;EACZ;EACA;EACA;EACA;EACA;EACA;EACAe,QAAQ,EAAE,CAAC;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF;;AAIF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAeF,WAAW,CAACG,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}