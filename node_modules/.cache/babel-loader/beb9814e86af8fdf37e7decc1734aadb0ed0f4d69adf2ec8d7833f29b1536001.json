{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  groups: [],\n  status: '',\n  privacyFilter: null,\n  avatarFilter: null,\n  friendsFilter: null\n};\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async (_, {\n  rejectWithValue\n}) => {\n  const response = await new Promise(resolve => {\n    setTimeout(() => {\n      // resolve({ result: 1, data: require('./groups.json') });\n      resolve({\n        result: 0\n      });\n    }, 1000);\n  });\n  if (response.result && response.data) {\n    return response.data;\n  } else {\n    return rejectWithValue('server error');\n  }\n});\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    changePrivacyFilter(state, action) {\n      state.privacyFilter = action.payload;\n    },\n    changeAvatarFilter(state, action) {\n      state.avatarFilter = action.payload;\n    },\n    changeFriendsFilter(state, action) {\n      state.friendsFilter = action.payload;\n    },\n    clearFilters(state) {\n      state.privacyFilter = null;\n      state.avatarFilter = null;\n      state.friendsFilter = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchGroups.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchGroups.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.groups = action.payload || [];\n    }).addCase(fetchGroups.rejected, state => {\n      state.status = 'failed';\n    });\n  }\n});\nexport default groupsSlice.reducer;\nexport const {\n  changePrivacyFilter,\n  changeAvatarFilter,\n  changeFriendsFilter,\n  clearFilters\n} = groupsSlice.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","groups","status","privacyFilter","avatarFilter","friendsFilter","fetchGroups","_","rejectWithValue","response","Promise","resolve","setTimeout","result","data","groupsSlice","name","reducers","changePrivacyFilter","state","action","payload","changeAvatarFilter","changeFriendsFilter","clearFilters","extraReducers","builder","addCase","pending","fulfilled","rejected","reducer","actions"],"sources":["/Users/adel/Desktop/work/react/vk/vk_test2/src/store/groupSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Group } from \"../models/models\";\ninterface GetGroupsResponse {\n  result: 1 | 0,\n  data?: Group[]\n}\n\ninterface GroupsState {\n  groups: Group[],\n  status: string,\n  privacyFilter: boolean | null,\n  avatarFilter: string | null,\n  friendsFilter: boolean | null\n}\n\nconst initialState: GroupsState = {\n  groups: [],\n  status: '',\n  privacyFilter: null,\n  avatarFilter: null,\n  friendsFilter: null\n}\n\n\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', async (_, { rejectWithValue }) => {\n  const response = await new Promise<GetGroupsResponse>(resolve => {\n    setTimeout(() => {\n      // resolve({ result: 1, data: require('./groups.json') });\n      resolve({ result: 0 })\n    }, 1000);\n  });\n  if (response.result && response.data) {\n\n    return response.data;\n  } else {\n    return rejectWithValue('server error')\n  }\n});\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState,\n  reducers: {\n    changePrivacyFilter(state, action: PayloadAction<boolean | null>) {\n      state.privacyFilter = action.payload\n    },\n    changeAvatarFilter(state, action: PayloadAction<string | null>) {\n      state.avatarFilter = action.payload\n    },\n    changeFriendsFilter(state, action: PayloadAction<boolean | null>) {\n      state.friendsFilter = action.payload\n    },\n    clearFilters(state) {\n      state.privacyFilter = null;\n      state.avatarFilter = null;\n      state.friendsFilter = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchGroups.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchGroups.fulfilled, (state, action: PayloadAction<Group[]>) => {\n        state.status = 'succeeded';\n        state.groups = action.payload || [];\n      })\n      .addCase(fetchGroups.rejected, (state) => {\n        state.status = 'failed';\n      });\n  },\n\n});\n\nexport default groupsSlice.reducer;\nexport const {\n  changePrivacyFilter,\n  changeAvatarFilter,\n  changeFriendsFilter,\n  clearFilters,\n} = groupsSlice.actions;\n\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAe/E,MAAMC,YAAyB,GAAG;EAChCC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,EAAE;EACVC,aAAa,EAAE,IAAI;EACnBC,YAAY,EAAE,IAAI;EAClBC,aAAa,EAAE;AACjB,CAAC;AAGD,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CAAC,oBAAoB,EAAE,OAAOQ,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAClG,MAAMC,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAoBC,OAAO,IAAI;IAC/DC,UAAU,CAAC,MAAM;MACf;MACAD,OAAO,CAAC;QAAEE,MAAM,EAAE;MAAE,CAAC,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;EACF,IAAIJ,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,IAAI,EAAE;IAEpC,OAAOL,QAAQ,CAACK,IAAI;EACtB,CAAC,MAAM;IACL,OAAON,eAAe,CAAC,cAAc,CAAC;EACxC;AACF,CAAC,CAAC;AACF,MAAMO,WAAW,GAAGjB,WAAW,CAAC;EAC9BkB,IAAI,EAAE,QAAQ;EACdhB,YAAY;EACZiB,QAAQ,EAAE;IACRC,mBAAmBA,CAACC,KAAK,EAAEC,MAAqC,EAAE;MAChED,KAAK,CAAChB,aAAa,GAAGiB,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,kBAAkBA,CAACH,KAAK,EAAEC,MAAoC,EAAE;MAC9DD,KAAK,CAACf,YAAY,GAAGgB,MAAM,CAACC,OAAO;IACrC,CAAC;IACDE,mBAAmBA,CAACJ,KAAK,EAAEC,MAAqC,EAAE;MAChED,KAAK,CAACd,aAAa,GAAGe,MAAM,CAACC,OAAO;IACtC,CAAC;IACDG,YAAYA,CAACL,KAAK,EAAE;MAClBA,KAAK,CAAChB,aAAa,GAAG,IAAI;MAC1BgB,KAAK,CAACf,YAAY,GAAG,IAAI;MACzBe,KAAK,CAACd,aAAa,GAAG,IAAI;IAC5B;EACF,CAAC;EACDoB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACrB,WAAW,CAACsB,OAAO,EAAGT,KAAK,IAAK;MACvCA,KAAK,CAACjB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDyB,OAAO,CAACrB,WAAW,CAACuB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAA8B,KAAK;MACzED,KAAK,CAACjB,MAAM,GAAG,WAAW;MAC1BiB,KAAK,CAAClB,MAAM,GAAGmB,MAAM,CAACC,OAAO,IAAI,EAAE;IACrC,CAAC,CAAC,CACDM,OAAO,CAACrB,WAAW,CAACwB,QAAQ,EAAGX,KAAK,IAAK;MACxCA,KAAK,CAACjB,MAAM,GAAG,QAAQ;IACzB,CAAC,CAAC;EACN;AAEF,CAAC,CAAC;AAEF,eAAea,WAAW,CAACgB,OAAO;AAClC,OAAO,MAAM;EACXb,mBAAmB;EACnBI,kBAAkB;EAClBC,mBAAmB;EACnBC;AACF,CAAC,GAAGT,WAAW,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}